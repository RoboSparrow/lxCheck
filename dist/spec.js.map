{"version":3,"sources":["webpack:///webpack/bootstrap 90fb7a7a1780f91fc5ab","webpack:///./src/spec.js","webpack:///./req/req.js","webpack:///./req/req.xapi.js","webpack:///./src/index.html","webpack:///./src/app.css","webpack:///./src/helper.js","webpack:///./src/specs/about.js","webpack:///./src/specs/statement-api.js","webpack:///./src/specs/activity-state-api.js","webpack:///./src/specs/activity-profile-api.js","webpack:///./src/specs/agent-profile-api.js","webpack:///./src/specs/legacy-request-api.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AChBA,uD;;;;;;ACAA,4D;;;;;;ACAA,uD;;;;;;ACAA,oD;;;;;;ACAA,sD;;;;;;ACAA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb,UAAS;;;;;;;AChCT;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb,UAAS;;AAET;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iCAAgC,yBAAyB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb,UAAS;;AAET;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,iCAAgC,4BAA4B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA,cAAa;;AAEb,UAAS;;AAET;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAgC,yBAAyB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA,cAAa;;AAEb,UAAS;;AAET,MAAK;;;;;;;AC7KL;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,yBAAwB,mDAAmD;AAC3E;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA,cAAa;;AAEb,UAAS;;AAET;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA,cAAa;;AAEb,UAAS;;AAET;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb,UAAS;;AAET;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAa;;AAEb,UAAS;;AAET;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA,cAAa;;AAEb,UAAS;;;AAGT,MAAK;;;;;;;AC7LL;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA,cAAa;;AAEb,UAAS;;AAET;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA,cAAa;;AAEb,UAAS;;AAET;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb,UAAS;;AAET;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAa;;AAEb,UAAS;;AAET;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAa;;AAEb;AACA;AACA;AACA;AACA,cAAa;;AAEb,UAAS;;;AAGT,MAAK;;;;;;;AC9ML;;;;;;;ACAA","file":"spec.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 90fb7a7a1780f91fc5ab\n **/","// dumb copy files\n\nrequire('file?name=req/req.js!../req/req.js');\nrequire('file?name=req/req.xapi.js!../req/req.xapi.js');\n\nrequire('file?name=index.html!./index.html');\nrequire('file?name=app.css!./app.css');\n\nrequire('file?name=helper.js!./helper.js');\n\n// bundle\nrequire('./specs/about.js');\nrequire('./specs/statement-api.js');\nrequire('./specs/activity-state-api.js');\nrequire('./specs/activity-profile-api.js');\nrequire('./specs/agent-profile-api.js');\nrequire('./specs/legacy-request-api.js');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/spec.js\n ** module id = 0\n ** module chunks = 0\n **/","module.exports = __webpack_public_path__ + \"req/req.js\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/file-loader?name=req/req.js!./req/req.js\n ** module id = 1\n ** module chunks = 0\n **/","module.exports = __webpack_public_path__ + \"req/req.xapi.js\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/file-loader?name=req/req.xapi.js!./req/req.xapi.js\n ** module id = 2\n ** module chunks = 0\n **/","module.exports = __webpack_public_path__ + \"index.html\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/file-loader?name=index.html!./src/index.html\n ** module id = 3\n ** module chunks = 0\n **/","module.exports = __webpack_public_path__ + \"app.css\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/file-loader?name=app.css!./src/app.css\n ** module id = 4\n ** module chunks = 0\n **/","module.exports = __webpack_public_path__ + \"helper.js\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/file-loader?name=helper.js!./src/helper.js\n ** module id = 5\n ** module chunks = 0\n **/","    ////\n    //  Statement API\n    ////\n\n    describe('About', function() {\n\n            var result;\n            var instance;\n\n            before(function(done){\n\n                req.xapi(\n                    '/about',\n                    {\n                        method: 'GET',\n                        always: function(res, ins){\n                            result = res;\n                            instance = ins;\n                            done();\n                        }\n                    }\n                );\n            });\n\n            it('should have an `about` endpoint', function(done){\n                assert.strictEqual(result.status, 200, 'response status: 200' );\n                assert.strictEqual(result.statusText.toLowerCase(), 'ok', 'response status message: OK' );\n                assert.strictEqual(Object.prototype.toString.call(result.data), '[object Object]', 'is an object' );\n                assert.property(result.data, 'version', 'result has `version` property');\n                done();\n            });\n\n        });\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/specs/about.js\n ** module id = 6\n ** module chunks = 0\n **/","    var statementId;\n    var putStatementId;\n    var statement;\n    var voidingStatement;\n\n    ////\n    //  Statement API\n    ////\n\n    describe('Statement API', function() {\n\n        statement = {\n            actor: {\n                'mbox': 'mailto: anonymous@lxhive.com',\n                'name': 'Anoymous'\n            },\n            verb: {\n                'id': 'http://adlnet.gov/expapi/verbs/attempted',\n                'display': {\n                    'en-US': 'launched'\n                }\n            },\n            object: {\n                'id': 'http://lxhive.com/activities/lrs-check',\n                'definition': {\n                    'name': {\n                        'en-Us': \"Demos\"\n                    }\n                }\n            }\n        };\n\n        voidingStatement = {\n            actor: {\n                mbox: 'mailto: anonymous@lxhive.com',\n                name: 'Anoymous'\n            },\n            verb : {\n                id: \"http://adlnet.gov/expapi/verbs/voided\",\n                display:{\n                    \"en-US\":\"voided\"\n                }\n            },\n            object: {\n                objectType: \"StatementRef\",\n                id: null\n            }\n        };\n\n        putStatementId = req.xapi.uuid();\n\n        describe('POST /statements', function() {\n\n            var result;\n            var instance;\n\n            before(function(done){\n                req.xapi(\n                    '/statements',\n                    {\n                        method: 'POST',\n                        data: statement,\n                        always: function(res, ins){\n                            result = res;\n                            instance = ins;\n                            setTimeout(done, 500);\n                        }\n                    }\n                );\n            });\n\n            it('should send a statement', function(done){\n                assert.strictEqual(result.status, 200, 'response status: 200' );\n                assert.strictEqual(result.statusText.toLowerCase(), 'ok', 'response status message: ok' );\n                assert.strictEqual(Object.prototype.toString.call(result.data), '[object Array]', 'is an array' );\n                assert.strictEqual(result.data.length, 1, 'has one element' );\n                statementId = result.data[0];\n                done();\n            });\n\n        });\n\n        describe('GET /statements', function() {\n\n            var result;\n            var instance;\n\n            before(function(done){\n                req.xapi(\n                    '/statements',\n                    {\n                        method: 'GET',\n                        query: {statementId: statementId},\n                        always: function(res, ins){\n                            result = res;\n                            instance = ins;\n                            done();\n                        }\n                    }\n                );\n            });\n\n            it('receive a statement object', function(done){\n                assert.strictEqual(result.status, 200, 'response status: 200' );\n                assert.strictEqual(result.statusText.toLowerCase(), 'ok', 'response status message: ok' );\n                assert.strictEqual(Object.prototype.toString.call(result.data), '[object Object]', 'is an object' );\n                assert.strictEqual(result.data.id, statementId, 'statementId = ' + statementId );\n                done();\n            });\n\n        });\n\n        describe('PUT /statements', function() {\n\n            var result;\n            var instance;\n\n            before(function(done){\n\n                voidingStatement.object.id = statementId;\n\n                req.xapi(\n                    '/statements',\n                    {\n                        method: 'PUT',\n                        query: {statementId: putStatementId},\n                        data: voidingStatement,\n                        always: function(res, ins){\n                            result = res;\n                            instance = ins;\n                            setTimeout(done, 500);\n                        }\n                    }\n                );\n            });\n\n            it('should send a statement', function(done){\n                assert.strictEqual(result.status, 204, 'response status: 204' );\n                assert.strictEqual(result.statusText.toLowerCase(), 'no content', 'response status message: No content' );\n                done();\n            });\n\n        });\n\n        describe('GET Voided statement', function() {\n\n            var result;\n            var instance;\n\n            before(function(done){\n                req.xapi(\n                    '/statements',\n                    {\n                        method: 'GET',\n                        data: statement,\n                        query: {statementId: statementId},\n                        always: function(res, ins){\n                            result = res;\n                            instance = ins;\n                            done();\n                        }\n                    }\n                );\n            });\n\n            it('reject a request for a voided statement', function(done){\n                assert.strictEqual(result.status, 404, 'response status: 404' );\n                assert.strictEqual(result.statusText.toLowerCase(), 'not found', 'response status message: Not found' );\n                done();\n            });\n\n        });\n\n    });\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/specs/statement-api.js\n ** module id = 7\n ** module chunks = 0\n **/","    ////\n    //  Statement API\n    ////\n\n    describe('State API', function() {\n\n        var now = new Date();\n\n        var _sharedId = req.xapi.uuid();\n\n        var createState = function() {\n            return {\n                stateId: req.xapi.uuid(),\n                activityId: 'http://lxhive.com/activities/' + _sharedId,\n                agent: {'mbox' : 'mailto: '  + _sharedId  + '@lxhive.com' },\n                registration: req.xapi.uuid()\n            };\n        };\n\n        var states = [];\n\n        describe('POST /activities/state', function() {\n\n            var result;\n            var instance;\n\n            before(function(done){\n\n                var state = createState();\n                states.push(state);\n\n                req.xapi(\n                    '/activities/state',\n                    {\n                        method: 'POST',\n                        query: state,\n                        data: {\n                            custom: now.toISOString()\n                        },\n                        always: function(res, ins){\n                            result = res;\n                            instance = ins;\n                            done();\n                        }\n                    }\n                );\n            });\n\n            it('should store an activity state', function(done){\n                assert.strictEqual(result.status, 204, 'response status: 204' );\n                assert.strictEqual(result.statusText.toLowerCase(), 'no content', 'response status message: No content' );\n                done();\n            });\n\n        });\n\n        describe('PUT /activities/state', function() {\n\n            var result;\n            var instance;\n\n            before(function(done){\n\n                var state = createState();\n                states.push(state);\n\n                req.xapi(\n                    '/activities/state',\n                    {\n                        method: 'PUT',\n                        query: state,\n                        data: {\n                            custom: now.toISOString()\n                        },\n                        always: function(res, ins){\n                            result = res;\n                            instance = ins;\n                            setTimeout(done, 500);\n                        }\n                    }\n                );\n            });\n\n            it('should store an activity state', function(done){\n                assert.strictEqual(result.status, 204, 'response status: 204' );\n                assert.strictEqual(result.statusText.toLowerCase(), 'no content', 'response status message: No content' );\n                done();\n            });\n\n        });\n\n        describe('GET single /activities/state', function() {\n\n            var result;\n            var instance;\n\n            before(function(done){\n\n                req.xapi(\n                    '/activities/state',\n                    {\n                        method: 'GET',\n                        query: states[0],\n                        always: function(res, ins){\n                            result = res;\n                            instance = ins;\n                            done();\n                        }\n                    }\n                );\n            });\n\n            it('receive a state object with data', function(done){\n                assert.strictEqual(result.status, 200, 'response status: 200' );\n                assert.strictEqual(result.statusText.toLowerCase(), 'ok', 'response status message: ok' );\n                assert.strictEqual(Object.prototype.toString.call(result.data), '[object Object]', 'is an object' );\n                assert.property(result.data, 'custom', 'result has `custom` property');\n                done();\n            });\n\n        });\n\n        describe('GET multiple /activities/state', function() {\n\n            var result;\n            var instance;\n\n            before(function(done){\n                req.xapi(\n                    '/activities/state',\n                    {\n                        method: 'GET',\n                        query: {\n                            activityId: states[0].activityId,\n                            agent: states[0].agent,\n                            since: now.toISOString()\n                        },\n                        always: function(res, ins){\n                            result = res;\n                            instance = ins;\n                            done();\n                        }\n                    }\n                );\n            });\n\n            it('receive an array of state ids', function(done){\n                assert.strictEqual(result.status, 200, 'response status: 200' );\n                assert.strictEqual(result.statusText.toLowerCase(), 'ok', 'response status message: ok' );\n                assert.strictEqual(Object.prototype.toString.call(result.data), '[object Array]', 'is an array');\n                assert.strictEqual(result.data.length, states.length, 'array length matches the previously sent states');\n\n                done();\n            });\n\n        });\n\n        describe('DELETE multiple /activities/state', function() {\n\n            var result;\n            var instance;\n\n            before(function(done){\n                req.xapi(\n                    '/activities/state',\n                    {\n                        method: 'DELETE',\n                        query: {\n                            activityId: states[0].activityId,\n                            agent: states[0].agent\n                        },\n                        always: function(res, ins){\n                            result = res;\n                            instance = ins;\n                            done();\n                        }\n                    }\n                );\n            });\n\n            it('delete all written states', function(done){\n                assert.strictEqual(result.status, 204, 'response status: 204' );\n                assert.strictEqual(result.statusText.toLowerCase(), 'no content', 'response status message: no content' );\n                setTimeout(done, 500);\n            });\n\n        });\n\n\n    });\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/specs/activity-state-api.js\n ** module id = 8\n ** module chunks = 0\n **/","    ////\n    //  Activity Profile API\n    ////\n\n    describe('Activity Profile API', function() {\n\n        var now = new Date();\n\n        var _activityId = req.xapi.uuid();\n\n        var createProfile = function() {\n            return {\n                activityId: _activityId,\n                profileId: req.xapi.uuid()\n            };\n        };\n\n        var profiles = [];\n\n        describe('POST /activities/profile', function() {\n\n            var result;\n            var instance;\n\n            before(function(done){\n\n                var profile = createProfile();\n                profiles.push(profile);\n\n                req.xapi(\n                    '/activities/profile',\n                    {\n                        method: 'POST',\n                        query: profile,\n                        data: {\n                            custom: now.toISOString()\n                        },\n                        always: function(res, ins){\n                            result = res;\n                            instance = ins;\n                            done();\n                        }\n                    }\n                );\n            });\n\n            it('should store an activity profile', function(done){\n                assert.strictEqual(result.status, 204, 'response status: 204' );\n                assert.strictEqual(result.statusText.toLowerCase(), 'no content', 'response status message: No content' );\n                done();\n            });\n\n        });\n\n        describe('POST /activities/profile', function() {\n\n            var result;\n            var instance;\n\n            before(function(done){\n\n                var profile = createProfile();\n                profiles.push(profile);\n\n                req.xapi(\n                    '/activities/profile',\n                    {\n                        method: 'PUT',\n                        query: profile,\n                        data: {\n                            custom: now.toISOString()\n                        },\n                        always: function(res, ins){\n                            result = res;\n                            instance = ins;\n                            done();\n                        }\n                    }\n                );\n            });\n\n            it('should store an activity profile', function(done){\n                assert.strictEqual(result.status, 204, 'response status: 204' );\n                assert.strictEqual(result.statusText.toLowerCase(), 'no content', 'response status message: No content' );\n                done();\n            });\n\n        });\n\n        describe('GET single /activities/profile', function() {\n\n            var result;\n            var instance;\n\n            before(function(done){\n\n                req.xapi(\n                    '/activities/profile',\n                    {\n                        method: 'GET',\n                        query: profiles[0],\n                        always: function(res, ins){\n                            result = res;\n                            instance = ins;\n                            done();\n                        }\n                    }\n                );\n            });\n\n            it('receive an activity profile object with data', function(done){\n                assert.strictEqual(result.status, 200, 'response status: 200' );\n                assert.strictEqual(result.statusText.toLowerCase(), 'ok', 'response status message: ok' );\n                assert.strictEqual(Object.prototype.toString.call(result.data), '[object Object]', 'is an object' );\n                assert.property(result.data, 'custom', 'result has `custom` property');\n                done();\n            });\n\n        });\n\n        describe('GET multiple /activities/profile', function() {\n\n            var result;\n            var instance;\n\n            before(function(done){\n                req.xapi(\n                    '/activities/profile',\n                    {\n                        method: 'GET',\n                        query: {\n                            activityId: _activityId\n                        },\n                        always: function(res, ins){\n                            result = res;\n                            instance = ins;\n                            done();\n                        }\n                    }\n                );\n            });\n\n            it('receive an array of activity profile ids', function(done){\n                assert.strictEqual(result.status, 200, 'response status: 200' );\n                assert.strictEqual(result.statusText.toLowerCase(), 'ok', 'response status message: ok' );\n                assert.strictEqual(Object.prototype.toString.call(result.data), '[object Array]', 'is an array');\n                assert.strictEqual(result.data.length, profiles.length, 'array length matches the previously sent profiles');\n\n                done();\n            });\n\n        });\n\n        describe('DELETE a /activities/profile', function() {\n\n            var result;\n            var instance;\n\n            before(function(done){\n\n                var count = 0;\n\n                var _done = function(done){\n                    count++;\n                    if(count === 2){\n                        done();\n                    }\n                };\n\n                req.xapi(\n                    '/activities/profile',\n                    {\n                        method: 'DELETE',\n                        query: profiles[0],\n                        always: function(res, ins){\n                            result = res;\n                            instance = ins;\n                            _done(done);\n                        }\n                    }\n                );\n\n                req.xapi(\n                    '/activities/profile',\n                    {\n                        method: 'DELETE',\n                        query: profiles[1],\n                        always: function(res, ins){\n                            result = res;\n                            instance = ins;\n                            _done(done);\n                        }\n                    }\n                );\n\n            });\n\n            it('delete a previously stored activity profile', function(done){\n                assert.strictEqual(result.status, 204, 'response status: 204' );\n                assert.strictEqual(result.statusText.toLowerCase(), 'no content', 'response status message: no content' );\n                setTimeout(done, 500);\n            });\n\n        });\n\n\n    });\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/specs/activity-profile-api.js\n ** module id = 9\n ** module chunks = 0\n **/","// @TODO\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/specs/agent-profile-api.js\n ** module id = 10\n ** module chunks = 0\n **/","// @TODO\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/specs/legacy-request-api.js\n ** module id = 11\n ** module chunks = 0\n **/"],"sourceRoot":""}